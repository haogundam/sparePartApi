// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SparePart.ModelAndPersistance.Context;

#nullable disable

namespace SparePart.ModelAndPersistance.Migrations
{
    [DbContext(typeof(SparePartContext))]
    [Migration("20231208030042_AddValidation")]
    partial class AddValidation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Engine Parts",
                            Description = "Parts related to vehicle engines."
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Brake System",
                            Description = "Parts related to vehicle brake systems."
                        });
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerContact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CustomerAddress = "123 Main Street",
                            CustomerContact = "1234567890",
                            CustomerEmail = "john.doe@example.com",
                            CustomerName = "John Doe"
                        });
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("BuyingPrice")
                        .HasColumnType("double");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EntryDate")
                        .HasColumnType("date");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("double");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("PartId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            PartId = 1,
                            BuyingPrice = 12.0,
                            CategoryId = 1,
                            EntryDate = new DateOnly(2023, 1, 1),
                            PartName = "Engine",
                            SKU = "ENG123",
                            SellingPrice = 5000.0,
                            SupplierId = 1
                        },
                        new
                        {
                            PartId = 2,
                            BuyingPrice = 8.0,
                            CategoryId = 2,
                            EntryDate = new DateOnly(2023, 1, 5),
                            PartName = "Brake Pads",
                            SKU = "BP456",
                            SellingPrice = 50.0,
                            SupplierId = 2
                        });
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.QuotationList", b =>
                {
                    b.Property<int>("QuoteNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("QuoteDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("QuoteValidDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("QuoteNo");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("QuotationLists");

                    b.HasData(
                        new
                        {
                            QuoteNo = 1,
                            CustomerId = 1,
                            PaymentType = "Credit",
                            QuoteDate = new DateOnly(2023, 2, 1),
                            QuoteValidDate = new DateOnly(2023, 2, 15),
                            Status = "pending",
                            TotalAmount = 150.0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.QuotationPart", b =>
                {
                    b.Property<int>("QuotePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoteNo")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.HasKey("QuotePartId");

                    b.HasIndex("PartId");

                    b.HasIndex("QuoteNo");

                    b.ToTable("QuotationParts");

                    b.HasData(
                        new
                        {
                            QuotePartId = 1,
                            PartId = 1,
                            Quantity = 5,
                            QuoteNo = 1,
                            UnitPrice = 20.0
                        });
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("StorageId");

                    b.HasIndex("PartId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Storages");

                    b.HasData(
                        new
                        {
                            StorageId = 1,
                            Location = "Section A",
                            PartId = 1,
                            Quantity = 50,
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierContact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            SupplierAddress = "456 Oak Avenue",
                            SupplierContact = "1234567890",
                            SupplierEmail = "info@abcparts.com",
                            SupplierName = "ABC Parts Inc."
                        },
                        new
                        {
                            SupplierId = 2,
                            SupplierAddress = "456 Oak Avenue",
                            SupplierContact = "1234567890",
                            SupplierEmail = "info@abcparts.com",
                            SupplierName = "ABC Parts Inc."
                        });
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("WarehouseAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            WarehouseId = 1,
                            WarehouseAddress = "789 Elm Street",
                            WarehouseName = "Main Warehouse"
                        });
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "rmaict@gmail.com",
                            PasswordHash = new byte[] { 24, 95, 3, 241, 181, 142, 4, 72, 26, 60, 48, 116, 217, 123, 230, 74, 83, 176, 245, 48, 92, 111, 89, 169, 223, 153, 39, 19, 242, 21, 111, 250, 60, 231, 196, 52, 26, 223, 216, 40, 253, 224, 18, 171, 10, 106, 209, 179, 65, 161, 211, 133, 37, 203, 28, 223, 187, 37, 210, 220, 190, 159, 166, 89 },
                            PasswordSalt = new byte[] { 169, 92, 249, 228, 30, 163, 76, 7, 232, 93, 205, 50, 179, 230, 151, 150, 93, 111, 179, 226, 221, 239, 234, 224, 64, 42, 31, 155, 132, 214, 4, 118, 240, 73, 230, 117, 12, 72, 133, 213, 217, 138, 60, 144, 196, 177, 165, 12, 0, 115, 183, 63, 83, 123, 199, 81, 16, 14, 145, 167, 212, 119, 49, 109, 141, 187, 220, 50, 101, 157, 108, 53, 145, 110, 146, 61, 216, 234, 181, 229, 250, 212, 150, 234, 210, 21, 253, 219, 163, 215, 35, 194, 74, 4, 88, 156, 216, 136, 137, 175, 240, 158, 11, 98, 36, 190, 28, 208, 68, 188, 112, 27, 44, 204, 110, 103, 91, 178, 106, 214, 14, 229, 144, 29, 180, 225, 178, 67 }
                        });
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Part", b =>
                {
                    b.HasOne("SparePart.ModelAndPersistance.Entities.Category", "Category")
                        .WithMany("Parts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SparePart.ModelAndPersistance.Entities.Supplier", "Supplier")
                        .WithMany("Parts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.QuotationList", b =>
                {
                    b.HasOne("SparePart.ModelAndPersistance.Entities.Customer", "Customer")
                        .WithMany("QuotationLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SparePart.ModelAndPersistance.User", "User")
                        .WithMany("QuotationLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.QuotationPart", b =>
                {
                    b.HasOne("SparePart.ModelAndPersistance.Entities.Part", "Part")
                        .WithMany("QuotationParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SparePart.ModelAndPersistance.Entities.QuotationList", "QuotationList")
                        .WithMany("QuotationParts")
                        .HasForeignKey("QuoteNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("QuotationList");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Storage", b =>
                {
                    b.HasOne("SparePart.ModelAndPersistance.Entities.Part", "Part")
                        .WithMany("Storages")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SparePart.ModelAndPersistance.Entities.Warehouse", "Warehouse")
                        .WithMany("Storages")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Category", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Customer", b =>
                {
                    b.Navigation("QuotationLists");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Part", b =>
                {
                    b.Navigation("QuotationParts");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.QuotationList", b =>
                {
                    b.Navigation("QuotationParts");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Supplier", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.Entities.Warehouse", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("SparePart.ModelAndPersistance.User", b =>
                {
                    b.Navigation("QuotationLists");
                });
#pragma warning restore 612, 618
        }
    }
}
